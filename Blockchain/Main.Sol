// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

//AddressBook can be used to store multiple smart contracts on the Blockchain and to find them later
import "./AddressBook.sol";

contract Main {

        //This is the main Smart Contract which must be deployed on the Ethereum Blockchain in order to work
      
      mapping(address => uint) private publicDiffieValues;
      bytes[] keys;
     
     address cloudProvider;
     address cloudConsumer;
     address cloudApplication;
     
      uint g;
      uint p;
      
      uint private A = 0;
      uint private B = 0;
      uint private C = 0;
      
      uint private AB = 0;
      uint private BC = 0;
      uint private CA = 0;
      
      string private c = '';
      string private t = '';
      
      string private h = '';

      AddressBook private addressBook;
      
      
  // This is the constructor which registers the public keys and generates the Diffie Hellmann Key Exchange
    constructor(uint _g, uint _p){
        
        g=  _g;
        p = _p;
        cloudProvider = 0xD429D86D0e4eC82bC8f26b0bda68F89F4Cb4b468;
        cloudConsumer = 0xA863d6B63f8524fbbD16A080F7e0C0865d19bd73 ;
        cloudApplication = 0xd2DFF497cAaBA3fd4e70D144616f5Bf27fA6f8f2;
        
        
    }
    
    //Returns the Public Key based on a provided Key
    function getAddress(bytes memory key) private pure returns(address){
        bytes32 keyHash = keccak256(key);
        
        address addr;
        assembly {
            mstore(0, keyHash)
            addr := mload(0)
        }
        
        return addr;
    }
    
    
    //Return the public Diffie Hellman values
    function getSymmetricParameters() public view returns(uint, uint){
     return (g,p);
        
    }
    

    //Used to create the first round of Diffie Hellman values 
    function setFirstSymmetricKey(uint _value) public{
        if (msg.sender == cloudProvider){
            A = _value;
        }else if (msg.sender == cloudConsumer){
            B = _value;
        }else if (msg.sender == cloudApplication){
            C = _value;
        }
    }
    
    //Return the first round of Diffie Hellman values
    function getFirstSymmetricKey() public view returns (uint){
        if(msg.sender == cloudConsumer){
            return A;
        }else if(msg.sender == cloudApplication){
            return B;
        }else if(msg.sender == cloudProvider){
            return C;
        }else{
            return 0;
        }
    }
    
    //Used to create the second round of Diffie Hellman values 
    function setSecondSymmetricKey(uint _value) public{
        if (msg.sender == cloudConsumer){
            AB = _value;
        }else if (msg.sender == cloudApplication){
            BC = _value;
        }else if (msg.sender == cloudProvider){
            CA = _value;
        }
    }
    
    //Return the second round of Diffie Hellman values
    function getSecondSymmetricKey() public view returns (uint){
        if(msg.sender == cloudConsumer){
            return CA;
        }else if(msg.sender == cloudApplication){
            return AB;
        }else if(msg.sender == cloudProvider){
            return BC;
        }else{
            return 0;
        }
    }
    
    //Blockchain function used to store a configuration on the deployed smart contract. c is the encripted configuration, t is the authentication tag
    function setConfiguration(string memory _c, string memory _t)public payable{
        if(msg.sender == cloudProvider || msg.sender == cloudConsumer){
            c = _c;
            t = _t;
        }
    }
    
    //Returns the stored encrypted application configuration 
    function getConfiguration()public view returns(string memory _c,string memory _t){
        if(msg.sender == cloudProvider || msg.sender == cloudConsumer || msg.sender == cloudApplication){
          _c = c;
          _t = t;
           return (_c,_t);
        }
        
    }
    

    //Stores either the hash value of a created backup, or 0 to the smart contract. This function is used to store the configuration status in the smart contract
    function setStatus(string memory _h) public{
        if(msg.sender == cloudApplication){
            h = _h;
        }
    }
    

    //This function returns the currently stored status from the smart contract
    function getStatus()public view returns(string memory _h){
        if(msg.sender == cloudProvider || msg.sender == cloudConsumer){
          _h = h;
           return _h;
        }
        
    }

    
}